 
c******************************************************************************
c
	subroutine ferdir( x, fd )
c     ................................
c     (unmodified from MHD package)
c     ................................
      implicit real*8 (a-h,o-z)
	implicit integer(i-n)
c
c     calculate fermi-dirac integrals                                  c
c                                                                      c
c     fd(1) = f    (x)                                                 c
c              -1/2                                                    c
c                                                                      c
c     fd(2) = f    (x)                                                 c
c               1/2                                                    c
c                                                                      c
c     fd(3) = f    (x)                                                 c
c               3/2                                                    c
c                                                                      c
c     fd(4) = f'   (x)                                                 c
c              -1/2                                                    c
c                                                                      c
c     fd(5) = f"   (x)                                                 c
c              -1/2                                                    c
c***********************************************************************
c
      dimension fd(5)
      dimension p1(5),p2(5),p3(5),p4(5),p5(5),p6(5),p7(5),p8(5),p9(5)
      dimension q1(5),q2(5),q3(5),q4(5),q5(5),q6(5),q7(5),q8(5),q9(5)
c
      data p1
     ./-1.25331 41288 20d+0, -1.72366 35577 01d+0, -6.55904 57292 58d-1,
     . -6.34228 31976 82d-2, -1.48838 31061 16d-5/
      data q1
     ./+1.00000 00000 00d+0, +2.19178 09259 80d+0, +1.60581 29554 06d+0,
     . +4.44366 95274 81d-1, +3.62423 22881 12d-2/
      data p2
     ./-3.13328 53055 70d-1, -4.16187 38522 93d-1, -1.50220 84005 88d-1,
     . -1.33957 93751 73d-2, -1.51335 07001 38d-5/
      data q2
     ./+1.00000 00000 00d+0, +1.87260 86759 02d+0, +1.14520 44465 78d+0,
     . +2.57022 55875 73d-1, +1.63990 25435 68d-2/
      data p3
     ./-2.34996 39854 06d-1, -2.92737 36375 47d-1, -9.88309 75887 38d-2,
     . -8.25138 63795 51d-3, -1.87438 41532 23d-5/
      data q3
     ./+1.00000 00000 00d+0, +1.60859 71091 46d+0, +8.27528 95308 80d-1,
     . +1.52232 23828 50d-1, +7.69512 04750 64d-3/
      data p4
     ./+1.07381 27694 00d+0, +5.60033 03660 00d+0, +3.68822 11270 00d+0,
     . +1.17433 92816 00d+0, +2.36419 35527 00d-1/
      data q4
     ./+1.00000 00000 00d+0, +4.60318 40667 00d+0, +4.30759 10674 00d-1,
     . +4.21511 32145 00d-1, +1.18326 01601 00d-2/
      data p5
     ./+6.78176 62666 00d-1, +6.33124 01791 00d-1, +2.94479 65177 20d-1,
     . +8.01320 71141 90d-2, +1.33918 21294 00d-2/
      data q5
     ./+1.00000 00000 00d+0, +1.43740 40039 70d-1, +7.08662 14845 00d-2,
     . +2.34579 49473 50d-3, -1.29449 92883 50d-5/
      data p6
     ./+1.15302 13402 00d+0, +1.05915 58972 00d+0, +4.68988 03095 00d-1,
     . +1.18829 08784 00d-1, +1.94387 55787 00d-2/
      data q6
     ./+1.00000 00000 00d+0, +3.73489 53841 00d-2, +2.32484 58137 00d-2,
     . -1.37667 70874 00d-3, +4.64663 92781 00d-5/
      data p7
     ./-8.22255 93300 00d-1, -3.62036 93450 00d+1, -3.01538 54100 00d+3,
     . -7.04987 15790 00d+4, -5.69814 59240 00d+4/
      data q7
     ./+1.00000 00000 00d+0, +3.93568 98410 00d+1, +3.56875 62660 00d+3,
     . +4.18189 36250 00d+4, +3.38513 89070 00d+5/
      data p8
     ./+8.22449 97626 00d-1, +2.00463 03393 00d+1, +1.82680 93446 00d+3,
     . +1.22265 30374 00d+4, +1.40407 50092 00d+5/
      data q8
     ./+1.00000 00000 00d+0, +2.34862 07659 00d+1, +2.20134 83743 00d+3,
     . +1.14426 73596 00d+4, +1.65847 15900 00d+5/
      data p9
     ./+2.46740 02368 40d+0, +2.19167 58236 80d+2, +1.23829 37907 50d+4,
     . +2.20667 72496 80d+5, +8.49442 92003 40d+5/
      data q9
     ./+1.00000 00000 00d+0, +8.91125 14061 90d+1, +5.04575 66966 70d+3,
     . +9.09075 94630 40d+4, +3.89960 91564 10d+5/
c
c
      if( x .gt. 4.0d0) go to 2
      if( x .gt. 1.0d0) go to 1
c
c
      y   = dexp(x)
c
      p   = y**2*(   p1(1) + y*(   p1(2) + y*(    p1(3) + y*(   p1(4)
     .                     + y*    p1(5)))))
      dp  = y**2*(2.*p1(1) + y*(3.*p1(2) + y*( 4.*p1(3) + y*( 5.*p1(4)
     .                     + y* 6.*p1(5)))))
      d2p = y**2*(4.*p1(1) + y*(9.*p1(2) + y*(16.*p1(3) + y*(25.*p1(4)
     .                     + y*36.*p1(5)))))
c
      q   = q1(1) +y*(q1(2) + y*(   q1(3) + y*(   q1(4) + y*    q1(5))))
      dq  =        y*(q1(2) + y*(2.*q1(3) + y*(3.*q1(4) + y* 4.*q1(5))))
      d2q =        y*(q1(2) + y*(4.*q1(3) + y*(9.*q1(4) + y*16.*q1(5))))
c
      fd(1) = 1.7724 53850 90552 d0*y + p/q
c
      fd(2) = y*(0.8862 26925 45276 d0 + y*
     .          (p2(1) + y*(p2(2) + y*(p2(3) + y*(p2(4) + y*p2(5)))))/
     .          (q2(1) + y*(q2(2) + y*(q2(3) + y*(q2(4) + y*q2(5))))))
c
      fd(3) = y*(1.3293 40388 17914 d0 + y*
     .          (p3(1) + y*(p3(2) + y*(p3(3) + y*(p3(4) + y*p3(5)))))/
     .          (q3(1) + y*(q3(2) + y*(q3(3) + y*(q3(4) + y*q3(5))))))
c
      fd(4) = 1.7724 53850 90552 d0*y + (dp*q - p*dq)/q**2
c
      fd(5) = 1.7724 53850 90552 d0*y +
     .               ((d2p*q - p*d2q)*q - 2.*(dp*q -p*dq)*dq)/q**3
c
      return
c
c
    1 p   =  p4(1)+ x*(p4(2) + x*(   p4(3) + x*(   p4(4) + x*   p4(5))))
      dp  =            p4(2) + x*(2.*p4(3) + x*(3.*p4(4) + x*4.*p4(5)))
      d2p =                       2.*p4(3) + 6.*x*(p4(4) + x*2.*p4(5))
c
      q   =  q4(1)+ x*(q4(2) + x*(   q4(3) + x*(   q4(4) + x*   q4(5))))
      dq  =            q4(2) + x*(2.*q4(3) + x*(3.*q4(4) + x*4.*q4(5)))
      d2q =                       2.*q4(3) + 6.*x*(q4(4) + x*2.*q4(5))
c
      fd(1) = p/q
c
      fd(2) = (p5(1)  + x*(p5(2) + x*(p5(3) + x*(p5(4) + x*p5(5)))))/
     .        (q5(1)  + x*(q5(2) + x*(q5(3) + x*(q5(4) + x*q5(5)))))
c
      fd(3) = (p6(1)  + x*(p6(2) + x*(p6(3) + x*(p6(4) + x*p6(5)))))/
     .        (q6(1)  + x*(q6(2) + x*(q6(3) + x*(q6(4) + x*q6(5)))))
c
      fd(4) = (dp *q - p*dq )/q**2
c
      fd(5) = (d2p*q - p*d2q)/q**2 - 2.*fd(4)*dq/q
c
      return
c
c
    2 root  = dsqrt(x)
      xsq   = x**2
      y     = 1.0d0/xsq
c
      p   =        y * (p7(1) + y*(   p7(2) + y*(   p7(3) + y*(    p7(4)
     .                        + y*    p7(5)))))
      dp  = (-2.*y/x)* (p7(1) + y*(2.*p7(2) + y*(3.*p7(3) + y*( 4.*p7(4)
     .                        + y* 5.*p7(5)))))
      d2p =  4.*y**2 * (p7(1) + y*(4.*p7(2) + y*(9.*p7(3) + y*(16.*p7(4)
     .                        + y*25.*p7(5))))) - dp/x
c
      q   = q7(1) + y * (q7(2) +y*(   q7(3) +y*(   q7(4) +y*    q7(5))))
      dq  = (-2.*y/x) * (q7(2) +y*(2.*q7(3) +y*(3.*q7(4) +y* 4.*q7(5))))
      d2q =  4.*y**2  * (q7(2) +y*(4.*q7(3) +y*(9.*q7(4) +y*16.*q7(5))))
     .                -  dq/x
c
      fd(1) = root * (2.0d0 + p/q)
c
      fd(2) = x*root*(0.66666 66666 66667 d0 + y*
     .        (p8(1) + y*(p8(2) + y*(p8(3)   + y*(p8(4) + y*p8(5)))))/
     .        (q8(1) + y*(q8(2) + y*(q8(3)   + y*(q8(4) + y*q8(5))))))
c
      fd(3) = xsq*root*(0.4d0   + y*
     .        (p9(1) + y*(p9(2) + y*(p9(3) + y*(p9(4) + y*p9(5)))))/
     .        (q9(1) + y*(q9(2) + y*(q9(3) + y*(q9(4) + y*q9(5))))))
c
      fd(4) =    fd(1)/(2.d0*x) +   root*(dp*q - p*dq)/q**2
c
      fd(5) = ( -fd(1)/x + fd(4))/(2.d0*x)
     .           + root* (dp *q - p*dq )/(2.*x*q**2)
     .           + root*((d2p*q - p*d2q) - 2.*dq*(dp*q - p*dq)/q)/q**2
c
      return
      end
