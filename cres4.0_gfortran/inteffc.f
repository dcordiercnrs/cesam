c
c*****************************************************************************
c
	subroutine inteffc(tl,pgl,rl,flini,wt,icase,iextr)
c>>>>>
c>>>>> finds starting value of flini for eff routines if the argument
c>>>>> is either log10(gas pressure) or log10(density). iextr is
c>>>>> set to 1 if extrapolation outside the table had to be made.
c>>>>>
c>>>>> based on eff-pre-computation with x=.73,y=.25,z=.02
c>>>>>
c>>>>> contains no common statements. parameters are local.
c>>>>>
c===== icase = 1: input=(tl,pgl),  rl ignored
c===== icase = 2: input=(tl,rl ), pgl ignored
c
      implicit double precision(a-h,o-z)
	implicit integer(i-n)
      parameter (nm = 11,nml = 5,nmh = 6,ntl = nml*nm,nth = nmh*nm)
c
      dimension tlog(nm),rlog(nm,nm),pglog(nm,nm),flog(nm,nm)
      dimension rll(ntl),rlh(nth),pgll(ntl),pglh(nth),fll(ntl),flh(nth)
      dimension flini(2),wt(2)
c
      equivalence(rlog (1,1),rll (1)) ,(rlog (1,nmh),rlh (1))
      equivalence(pglog(1,1),pgll(1)) ,(pglog(1,nmh),pglh(1))
      equivalence(flog (1,1),fll (1)) ,(flog (1,nmh),flh (1))
c
      data tlog/
     .    3.40000d0,   3.80000d0,   4.20000d0,   4.60000d0,   5.00000d0,
     .    5.40000d0,   5.80000d0,   6.20000d0,   6.60000d0,   7.00000d0,
     .    7.40000d0/
c
      data rll/
     .  -15.93806d0, -14.59077d0, -13.11393d0, -11.71751d0, -10.38835d0,
     .   -8.97767d0,  -7.59375d0,  -6.16023d0,  -4.74661d0,  -3.34048d0,
     .   -1.93629d0,
     .  -14.39806d0, -13.08988d0, -11.78384d0, -10.46730d0,  -9.15835d0,
     .   -7.85767d0,  -6.54375d0,  -5.24023d0,  -3.92661d0,  -2.62048d0,
     .   -1.31627d0,
     .  -12.79806d0, -11.57078d0, -10.36165d0,  -9.14343d0,  -7.92835d0,
     .   -6.71767d0,  -5.50375d0,  -4.28023d0,  -3.06660d0,  -1.85045d0,
     .   -0.63617d0,
     .  -11.19806d0, -10.06214d0,  -8.95086d0,  -7.82325d0,  -6.69833d0,
     .   -5.57766d0,  -4.45374d0,  -3.33021d0,  -2.20654d0,  -1.08028d0,
     .    0.04407d0,
     .   -9.59806d0,  -8.56014d0,  -7.52659d0,  -6.49503d0,  -5.46791d0,
     .   -4.43760d0,  -3.40366d0,  -2.37003d0,  -1.33614d0,  -0.30961d0,
     .    0.72372d0/
      data rlh/
     .   -7.99806d0,  -7.05242d0,  -6.11177d0,  -5.17967d0,  -4.23200d0,
     .   -3.29677d0,  -2.35276d0,  -1.41861d0,  -0.47419d0,   0.46015d0,
     .    1.40286d0,
     .   -6.39806d0,  -5.55147d0,  -4.69828d0,  -3.84877d0,  -3.00142d0,
     .   -2.15675d0,  -1.30499d0,  -0.46287d0,   0.38404d0,   1.23722d0,
     .    2.08971d0,
     .   -4.79807d0,  -4.04144d0,  -3.28452d0,  -2.53132d0,  -1.76802d0,
     .   -1.01603d0,  -0.25685d0,   0.49360d0,   1.25430d0,   2.00696d0,
     .    2.76640d0,
     .   -3.19831d0,  -2.53173d0,  -1.86318d0,  -1.20584d0,  -0.53947d0,
     .    0.12553d0,   0.78489d0,   1.45261d0,   2.11985d0,   2.77988d0,
     .    3.44720d0,
     .   -1.59748d0,  -1.02039d0,  -0.44723d0,   0.12189d0,   0.69032d0,
     .    1.26763d0,   1.83971d0,   2.41156d0,   2.98379d0,   3.55092d0,
     .    4.12641d0,
     .    0.00202d0,   0.48728d0,   0.96517d0,   1.44458d0,   1.92401d0,
     .    2.40470d0,   2.88056d0,   3.36421d0,   3.84159d0,   4.32331d0,
     .    4.80062d0/
c
      data pgll/
     .   -4.71634d0,  -2.70110d0,  -0.79422d0,   1.01898d0,   2.74815d0,
     .    4.55883d0,   6.34275d0,   8.17627d0,   9.98989d0,  11.79601d0,
     .   13.60020d0,
     .   -3.17634d0,  -1.30952d0,   0.53582d0,   2.26909d0,   3.97815d0,
     .    5.67883d0,   7.39275d0,   9.09627d0,  10.80989d0,  12.51602d0,
     .   14.22022d0,
     .   -1.57634d0,   0.09093d0,   1.95691d0,   3.59094d0,   5.20815d0,
     .    6.81883d0,   8.43275d0,  10.05627d0,  11.66990d0,  13.28603d0,
     .   14.90028d0,
     .    0.02366d0,   1.56549d0,   3.35740d0,   4.90076d0,   6.43816d0,
     .    7.95883d0,   9.48275d0,  11.00628d0,  12.52992d0,  14.05612d0,
     .   15.58052d0,
     .    1.62366d0,   3.06194d0,   4.76523d0,   6.22483d0,   7.66836d0,
     .    9.09886d0,  10.53279d0,  11.96637d0,  13.40014d0,  14.82664d0,
     .   16.26059d0/
      data pglh/
     .    3.22366d0,   4.56932d0,   6.08520d0,   7.53751d0,   8.90120d0,
     .   10.23927d0,  11.58325d0,  12.91715d0,  14.26164d0,  15.59761d0,
     .   16.94023d0,
     .    4.82375d0,   6.07052d0,   7.37716d0,   8.83489d0,  10.11675d0,
     .   11.37463d0,  12.62823d0,  13.87314d0,  15.12352d0,  16.37610d0,
     .   17.63041d0,
     .    6.42746d0,   7.58888d0,   8.76598d0,  10.05827d0,  11.32914d0,
     .   12.52233d0,  13.69271d0,  14.83754d0,  16.00047d0,  17.15703d0,
     .   18.32207d0,
     .    8.15380d0,   9.30678d0,  10.50206d0,  11.73099d0,  12.68725d0,
     .   13.70433d0,  14.76934d0,  15.84437d0,  16.91982d0,  17.98796d0,
     .   19.06506d0,
     .   10.79939d0,  11.94400d0,  13.08449d0,  13.22093d0,  14.17459d0,
     .   15.14145d0,  16.10082d0,  17.05997d0,  18.01959d0,  18.97151d0,
     .   19.93379d0,
     .   13.96914d0,  14.93979d0,  14.51362d0,  15.31529d0,  16.11750d0,
     .   16.92229d0,  17.71977d0,  18.53028d0,  19.33067d0,  20.13707d0,
     .   20.93387d0/
c
      data fll/
     .  -15.20875d0, -12.62213d0, -11.68335d0, -10.85416d0, -10.12500d0,
     .   -9.31434d0,  -8.53047d0,  -7.69708d0,  -6.88379d0,  -6.07850d0,
     .   -5.27639d0,
     .  -13.66875d0, -11.40213d0, -10.35335d0,  -9.60416d0,  -8.89500d0,
     .   -8.19434d0,  -7.48047d0,  -6.77708d0,  -6.06379d0,  -5.35850d0,
     .   -4.65639d0,
     .  -12.06875d0, -10.50213d0,  -8.93335d0,  -8.28416d0,  -7.66500d0,
     .   -7.05434d0,  -6.44047d0,  -5.81708d0,  -5.20379d0,  -4.58850d0,
     .   -3.97639d0,
     .  -10.46875d0,  -9.61213d0,  -7.54335d0,  -6.98416d0,  -6.43500d0,
     .   -5.91434d0,  -5.39047d0,  -4.86708d0,  -4.34379d0,  -3.81850d0,
     .   -3.29639d0,
     .   -8.86875d0,  -8.40213d0,  -6.15335d0,  -5.66416d0,  -5.20500d0,
     .   -4.77434d0,  -4.34047d0,  -3.90708d0,  -3.47379d0,  -3.04850d0,
     .   -2.61639d0/
      data flh/
     .   -7.26875d0,  -6.92213d0,  -4.97335d0,  -4.35416d0,  -3.97500d0,
     .   -3.63434d0,  -3.29047d0,  -2.95708d0,  -2.61379d0,  -2.27850d0,
     .   -1.93639d0,
     .   -5.66875d0,  -5.42213d0,  -4.11335d0,  -3.09416d0,  -2.77500d0,
     .   -2.50434d0,  -2.25047d0,  -2.00708d0,  -1.75379d0,  -1.49850d0,
     .   -1.24639d0,
     .   -4.06875d0,  -3.91213d0,  -3.30335d0,  -2.10416d0,  -1.64500d0,
     .   -1.40434d0,  -1.20047d0,  -1.03708d0,  -0.87379d0,  -0.71850d0,
     .   -0.55639d0,
     .   -2.46875d0,  -2.40213d0,  -2.26335d0,  -1.25416d0,  -0.26500d0,
     .   -0.17434d0,  -0.11047d0,  -0.03708d0,   0.03621d0,   0.10150d0,
     .    0.17361d0,
     .   -0.85875d0,  -0.88213d0,  -0.90335d0,   1.24584d0,   1.20500d0,
     .    1.17566d0,   1.13953d0,   1.10292d0,   1.06621d0,   1.02150d0,
     .    0.98361d0,
     .    0.92125d0,   0.77787d0,   3.15665d0,   2.99584d0,   2.83500d0,
     .    2.67566d0,   2.50953d0,   2.35292d0,   2.18621d0,   2.02150d0,
     .    1.84361d0/
c
      it=-999
      ip=-999
      ir=-999
      iextr=0
c========== select isotherms for linear inter(extra)polation
      do 11 i=1,nm
      if(tl.lt.tlog(i)) goto 20
      it=i
 11   continue
         iextr=1
         it=nm-1
c
  20  if(it.eq.-999) then
         iextr=1
         it=1
      end if
c========== tl-part of arguments
      it1=it+1
      x0 =tlog(it)
      x1 =tlog(it1)
      x2 =x0
      x3 =x1
      x  =  tl
c
c................................. icase = 1 ............................
      if(icase.eq.2) goto 200
c
c========== select pressure points for linear inter(extra)polation
      do 21 i=1,nm
      if(pgl.lt.pglog(it,i)) goto 30
      ip=i
  21  continue
         iextr=1
         ip=nm-1
c
  30  if(ip.eq.-999) then
         iextr=1
         ip=1
      end if
c
c========== define the three fonction values for inter(extra)polation
      ip1=ip+1
      y0 =pglog(it,ip)
      y1 =pglog(it1,ip)
      y2 =pglog(it,ip1)
      y3 =pglog(it1,ip1)
      z0 =flog(it,ip)
      z1 =flog(it1,ip)
      z2 =flog(it,ip1)
      z3 =flog(it1,ip1)
c
c========== define arguments
      y  = pgl
      goto 1000
c................................. icase = 2 ............................
c
c========== select density points for linear inter(extra)polation
 200  do 31 i=1,nm
      if(rl.lt.rlog(it,i)) goto 40
      ir=i
  31  continue
         iextr=1
         ir=nm-1
c
  40  if(ir.eq.-999) then
         iextr=1
         ir=1
      end if
c
c========== define the three fonction values for inter(extra)polation
      ir1=ir+1
      y0 =rlog(it,ir)
      y1 =rlog(it1,ir)
      y2 =rlog(it,ir1)
      y3 =rlog(it1,ir1)
      z0 =flog(it,ir)
      z1 =flog(it1,ir)
      z2 =flog(it,ir1)
      z3 =flog(it1,ir1)
c
c========== define argument
      y  =  rl
c
c========== call bilincear interpolation
c
1000  continue
c
c....... lower triangle
      call  bilinc (x0,y0,z0,x1,y1,z1,x2,y2,z2,x,y,z)
      flini(1) = z
c
c....... upper triangle
      call  bilinc (x3,y3,z3,x2,y2,z2,x1,y1,z1,x,y,z)
      flini(2) = z
c
c....... weights (quite arbitrary)
      wlow = 1./( (x-x0)**2 + (y-y0)**2 + 1.e-5 )
      whig = 1./( (x-x3)**2 + (y-y3)**2 + 1.e-5 )
      wtot = wlow + whig
      wlow = wlow/wtot
      whig = whig/wtot
      wt(1) = wlow
      wt(2) = whig
c
      return
      end
